# Modern Business Language

## Overview

MBL is designed to be a modern, business-focused programming language that emphasizes readability, maintainability, and practical business operations. It supports high-level abstractions while maintaining precise control over business logic and data handling.

## Program Structure

All MBL code exists within a "program" function, which serves as the entry point for the application. External resources are accessed through the "computer" record, which provides a unified interface to system capabilities.

```mbl
program():
    # Main program code here #
    computer.write("Hello, World!")
    result = process_data()
    if result.reason:
        computer.write("Error: " + result.reason)
```

### Computer Record

The computer record provides access to system resources and capabilities:

```mbl
computer = {
    # File Operations
    read_file(path): returns text or unknown
    write_file(path, content): returns nothing or unknown
    delete_file(path): returns nothing or unknown
    
    # Console Operations
    write(value): writes to standard output
    read(): reads from standard input
    
    # System Information
    time(): returns current time
    date(): returns current date
    environment(): returns environment variables
    
    # Network Operations
    http_get(url): returns response or unknown
    http_post(url, data): returns response or unknown
    
    # Database Operations
    db_connect(connection_string): returns connection or unknown
    db_query(connection, query): returns result or unknown
    db_execute(connection, command): returns nothing or unknown
}
```

## Error Handling

MBL uses a unified error handling approach through the Unknown type, which implements ternary logic. Any operation that can fail returns either the expected value, Nothing, or an Unknown value.

### Unknown Type

The Unknown type is used to represent both errors and undefined states in ternary logic. It has the following properties:
- .reason: Text description of why the value is unknown
- .possibles: List of possible values that could resolve the unknown

In ternary logic operations:
- True AND Unknown = Unknown
- False AND Unknown = False
- True OR Unknown = True
- False OR Unknown = Unknown
- NOT Unknown = Unknown

Example ternary logic:
```mbl
function validate_age(age):
    if age < 0:
        return false
    if age > 150:
        return unknown("Age exceeds reasonable maximum")
    return true

# Ternary logic examples
result1 = validate_age(25) AND validate_age(200)  # Returns Unknown
result2 = validate_age(-1) OR validate_age(200)   # Returns False
result3 = validate_age(25) OR validate_age(200)   # Returns True
result4 = NOT validate_age(200)                   # Returns Unknown
```

When an Unknown value is used in a condition:
```mbl
if validate_age(200):
    # This block won't execute because Unknown is not True
    computer.write("Valid age")
elif validate_age(200).reason:
    # This block will execute
    computer.write("Age validation failed: " + validate_age(200).reason)
else:
    # This block won't execute because Unknown is not False
    computer.write("Invalid age")
```

Example error handling with ternary logic:
```mbl
function divide(a, b):
    if b == 0:
        return unknown("Division by zero")
    return a / b

result = divide(10, 0)
if result.reason:
    computer.write("Error: " + result.reason)
else:
    computer.write("Result: " + result)
```

### Error Propagation

When an operation returns an Unknown value, it should be handled by the caller. If not handled, the Unknown value propagates up the call stack until it reaches the program function or is explicitly handled.

Example with ternary logic:
```mbl
function process_data():
    data = computer.read_file("input.txt")
    if data.reason:
        return unknown("Failed to read input file: " + data.reason)
    
    result = parse_data(data)
    if result.reason:
        return unknown("Failed to parse data: " + result.reason)
    
    return result

program():
    result = process_data()
    if result.reason:
        computer.write("Error: " + result.reason)
    else:
        computer.write("Success: " + result)
```

## Comments

A comment is initiated with any number of adjacent "#" symbols (unless in a string literal) and ends with the same number of adjacent "#" symbols.
Consequently, comments may be recursive.

Example:
```mbl
# Single line comment #
## Multi-line
comment ##
### Nested
# comment
inside ###
```

## Data Value Types

- Nothing.  This is the value any non-assigned variable returns.  Assigning
nothing also destroys a variable.
- Anything.  Any value will match this and affects of anything, such as in
arithmetic, allow the MBL interpreter to select a value conforming to the need.
- Unknown.  Used for ternary operations.  An unknown may have the .reason (text description) and .possibles (list) attributes.
- Boolean.  True or False.
- Number.  High precision floating point value.  Literal may include one decimal and any number of underscores within (but not prefixed or suffixed).  The underscores are purely for visual clarity purposes.
- Text.  UTF-8.  Literal strings begin with one or more adjacent quotes and end with the same number of adjacent quotes.  There are no escapes.
- Time.  Has properties Year, Month, Day, Hour, Minute, and Second.  Literal begins with "@" symbol in forms:  @YYYY-MM-DD, or @HH:MM:SS, or combined @YYYY-MM-DD HH:MM:SS.
- Money.  Stored as integer with four digits below lowest denomination (e.g. the penny).  Literal begins with "$" symbol with decimal after base denomination (e.g. dollar).  The currency is USD by default but may be explicitly specified suffixed to value (e.g. $19.95 USD).
- List.  A collection of values indexed numerically.  Literal representation is
in the form [ value1, valu2, .. ]
- Record.  A collection of values indexed by name.  Literal form is myvar =
{ attrib1:value1, attrib2:value2, .. }
- function.  A sequence of instruction tokens with associated record as its
data scope.
- trigger.  A sequence of condition tokens with associated data scope and associated function.


### Text

Text is UTF-8 characters and includes the following useful methods:

- .length()
- .slice( index, length )
- .splice( index, length, value )
- .uppercase()
- .lowercase()
- .titlecase()
- .escaped()
- .unescaped()
- .form( record, opener, closer )  -- this interpolates values into the string;

by default, the record would be the current variable scope, the opener is "{"
and the closer is "}".

Similar to a list, the characters of a text value may be retrieved by numerical
index.  For example:  `"Hello".slice(2,2)` provides "ll".


### Money

```mbl
$.USD.base = "dollar"
$.USD.lowest = "cent"
$.USD.dollar = 100
```

USD is the default currency (assumed if not specified).  It is defined above.
The base currency is what is meant when you write `$1 USD`. And $1 is equal to
100 cents.  In memory, for calculation purposes, the precision stored is to
four digits lower than the lowest denomination.

Exchange rates in other currencies may be specified in terms of USD's lowest
denomination.  The following is an example for the Korean WON.

```mbl
$.WON.base = "cheon"
$.WON.lowest = "shib"
$.WON.cheon = 100
$.WON.exchange = 100
```

In the above, 100 shib WON translate to 1 cent USD.

### Time

Time is held as a collection of the following attributes.

- year
- month
- day
- hour
- minute
- second
- milliscond

Not all need be specified but when adding or subtracting time, the attributes
not specified are ignored.

```mbl
birth_date = @1970-07-29
birth_date = 1970 years + 7 months + 29 days
```

The above illustrates two ways of specifying the same date.  The first is the
short form and the second way is actually just adding durations of time
together.

In arithmatic, no sign prefixing a time attributes implies addition while a "-"
sign would indicate subtraction.

The `new_date = @2025-05-01 + 7 days + 8 hours` code would equate to
`@2025-05-08 08:00:00.0`.

As for days of the week, there is the following syntax:

```mdl
meeting_date = thursday before @2025-08-15
meeting_date = tuesday after @2025-08-15
```

### List

A list is numerically indexed (integers), dynamically sized, and may hold
different values.

The following assigns a new list to the mylist variable:
`mylist = ["text",3.14,@2025-03-06,$13.95 USD, [1,2,3], {name:"joe",
age:54}]`

Note that, although tab indentation after a colon is used to identify a code
block in MBL, the spacing, newlines, and tabs within an explicit list are
separate from this and may be used free-form.

Extracting the second item, 3.14, is done by writing `mylist[1]` because
indexes are zero-based.

Useful methods of a list include:

- .length()
- .slice( index, length )
- .splice( index, length, value(s) )

### Record

A record is name indexed, dynamically sized, and may hold different values.
The name used for each attribute within a record may be any text but following
variable name conventions allows the use of dot notation when referencing them.

```mbl
person = {
    name:"Joe",
    age:34
    "full-name":"Joe Broe"
}
```

In the above, we don't need quotes around the attribute names "name" or "age"
but we do around "full-name" because that name does not comply with the
variable name convention.  Note that, there is no possibility of keyword
conflicts in the definition of a record so using keywords here is allowed.

Referencing an attribute may be specified in the form `person["name"]` or
`person.name` or `person["full-name"] but not `person.full-name`.  This is
similar to Javascript.

Note that, although tab indentation after a colon is used to identify a code
block in MBL, the spacing, newlines, and tabs within an explicit record are
separate from this and may be used free-form.

Also, a new record may inherit a base record by prefixing it with a base
record, such as this: `person = animal { name:"joe", age:34 }`.  In this case,
whatever the record "animal" is is merely extended in the new record "person".
The person is an animal.


### Function

A function is a code-block, optionally with a parameter list, that when
called, has a record associated with it to be its local data scope.  If the
function is not given an explicit return value then the entire record is
returned with it.

```mbl
calc( a, operation, b ):
    Consider operation:
        When "+": return a + b
        When "-": return a - b
        Otherwise: return unknown("{operation} unsupported".form() )
```

For a function inside a function to reach the data scope of the super-function,
there is the "super" keyword.

For a function to be extended by another function, merely prefix the base
function to the new function.  Let's say you have funciton "mybase" that you
want to use as a base-class for an "mynew" function:

```mbl
mybase( a, b ):
    # do stuff #

mybase mynew( a, b, c ):
    super(a,b)
    # do more stuff #

### Trigger

A trigger is a function that, instead of parameters, has a condition.  It is
also prefixed with the "when" keyword, acting as if it were a base function.

```mbl
when( x > 100 ):
    super.x = 0
```

Each variable in the condition is watched and the condition re-evaluated when
one or more are assigned new different values. MBL operates in moments of a
third of a second. The execution model works as follows:

1. All regular code executes normally, making variable assignments as needed
2. The system tracks which variables are referenced in trigger conditions
3. When a watched variable is assigned a new value, it's marked as "changed" for the current moment
4. At the end of each moment (1/3 second time slice), the system:
   - Collects all triggers whose watched variables changed during that moment
   - Evaluates each affected trigger's condition exactly once
   - Executes trigger actions for conditions that evaluate to true
   - Resets all "changed" flags for the next moment

This batched evaluation ensures triggers see a consistent state reflecting all
changes made in the moment, rather than intermediate states. It also prevents
cascading or thrashing behavior that could occur if triggers were evaluated
immediately upon every variable change.

### Constraint

A constraint is similar to a trigger but evaluates immediately when a variable changes rather than at the end of a moment. It is used to enforce business rules and data validation. Unlike triggers, which are used for reactions to data changes, constraints are used to prevent invalid data from being stored in the first place.

Constraints include an optional healing action that can automatically correct invalid data, rather than simply rejecting it.

```mbl
constrain( x < 20 ):
    # If x is assigned a value >= 20, the assignment will fail
    # The constraint validation happens immediately on assignment
    
constrain( x < 20 ):
    # This constraint includes a healing action
    x = 20  # If x would exceed 20, cap it at 20 instead
```

The execution model for constraints works as follows:

1. The system tracks which variables are referenced in constraint conditions
2. When a watched variable is assigned a new value:
   - All constraints that reference this variable are immediately evaluated
   - If any constraint evaluates to false (condition violated):
     - If the constraint has a healing action, it's executed to try to fix the data
     - If healing succeeds (constraint now evaluates to true), the assignment proceeds
     - If healing fails or there is no healing action, the assignment is rejected
   - If all constraints pass, the assignment proceeds normally

Constraints provide immediate validation and self-healing capabilities, complementing the moment-based trigger system for a complete reactive programming model.

## Modules and Packages

### Module Definition

```mbl
module "my_module":
    # module contents #
    export function public_function():
        # function code #
    
    private function internal_function():
        # function code #
```

### Package Structure

```
my_package/
    package.mbl      # Package definition and exports
    module1.mbl      # Individual modules
    module2.mbl
    tests/           # Test files
    docs/            # Documentation
```

### Import System

```mbl
import "package_name"
import "package_name" as alias
import { specific_item } from "package_name"
```

## Standard Library

### Core Functions

- type(): Get type of value
- clone(): Deep copy of value
- serialize(): Convert to string representation
- deserialize(): Convert from string representation

### Business Operations

- format_currency(): Format money values
- calculate_tax(): Tax calculations
- date_diff(): Calculate time differences
- validate_email(): Email validation
- generate_invoice(): Invoice generation

### Data Processing

- filter(): Filter collections
- map(): Transform collections
- reduce(): Aggregate collections
- sort(): Sort collections
- group(): Group by key

### File Operations

```mbl
file = open("path/to/file", "mode")
file.read()
file.write(content)
file.close()
```

## Best Practices

### Naming Conventions

- Variables: camelCase
- Functions: camelCase
- Types: PascalCase
- Constants: UPPER_SNAKE_CASE
- Private members: _camelCase

### Code Organization

- One concept per file
- Clear module boundaries
- Consistent indentation (4 spaces)
- Maximum line length: 100 characters
- Clear function and variable names

### Documentation

- Module-level documentation
- Function documentation with parameters and return values
- Examples in documentation
- Version history
- Dependencies

## Security

### Data Protection

- Automatic encryption of sensitive data
- Secure storage of credentials
- Input validation
- Output sanitization

### Access Control

```mbl
role "admin":
    can: ["read", "write", "delete"]
    cannot: ["modify_permissions"]

role "user":
    can: ["read", "write"]
    cannot: ["delete", "modify_permissions"]
```

## Performance Considerations

### Optimization Features

- Lazy evaluation
- Caching mechanisms
- Parallel processing support
- Memory management
- Resource pooling

### Monitoring

```mbl
monitor "performance_metric":
    when(metric > threshold):
        alert("Performance issue detected")
        log(metric_details)
```

## Development Tools

### REPL Environment

MBL includes an interactive Read-Eval-Print Loop (REPL) environment for rapid development and testing. The REPL allows developers to interactively explore language features, test code snippets, and experiment with the reactive programming model's trigger and constraint systems.

```
$ mbl-repl
Modern Business Language (MBL) REPL
Version 0.1.0
Type 'help' for assistance, 'exit' to quit

mbl> x = 5
Command executed successfully.

mbl> y = x * 2
Command executed successfully.

mbl> when x > 10:
...     y = "x is greater than 10"
... end
Command executed successfully.

mbl> x = 15
Command executed successfully.
=== End of moment 0 ===
Evaluating trigger 'x_changed' at moment 0
x = 15 at moment 0
```

REPL special commands:

- `exit`, `quit` - Exit the REPL
- `help` - Show the help message
- `clear` - Clear the screen
- `history` - Show command history
- `!<num>` - Execute command from history by number
- `reset` - Reset the runtime environment
- `vars` - Show all defined variables
- `triggers` - Show all defined triggers
- `constraints` - Show all defined constraints

The REPL supports multi-line input with automatic indentation tracking, similar to Python's REPL, making it easier to define complex structures like triggers and constraints.

## Testing

### Unit Tests

```mbl
test "function_name":
    setup:
        # test setup #
    test "should do something":
        # test code #
        assert result == expected
    teardown:
        # cleanup #
```

### Integration Tests

```mbl
integration "feature_name":
    setup:
        # integration setup #
    test "should work with other components":
        # integration test code #
    teardown:
        # cleanup #
```

## Deployment

### Configuration

```mbl
config "production":
    database_url = "postgresql://..."
    api_key = env("API_KEY")
    debug = false
```

### Environment Management

```mbl
environment "development":
    debug = true
    log_level = "debug"
    mock_external_services = true
```

## Version Control Integration

### Git Integration

```mbl
git:
    branch = current_branch()
    commit = last_commit()
    status = repository_status()
```

## Internationalization

### Language Support

```mbl
i18n:
    locale = "en_US"
    currency = "USD"
    date_format = "MM/DD/YYYY"
    number_format = "#,##0.00"
```

## Logging

### Log Levels

```mbl
log:
    debug("Detailed information")
    info("General information")
    warning("Warning message")
    error("Error message")
    critical("Critical error")
```

## Database Integration

### Query Building

```mbl
query = select("users")
    .where("age > ?", 18)
    .order_by("name")
    .limit(10)
```

### Transaction Management

```mbl
transaction:
    begin()
    try:
        # database operations #
        commit()
    catch error:
        rollback()
        throw error
```

### Unknown Type Operations

The Unknown type interacts with other operations in predictable ways:

#### Arithmetic Operations
```mbl
# Arithmetic with Unknown
5 + unknown("Missing value") = unknown("Cannot add to unknown value")
unknown("Missing value") * 3 = unknown("Cannot multiply unknown value")
```

#### Comparison Operations
```mbl
# Comparisons with Unknown
5 > unknown("Missing value") = unknown("Cannot compare with unknown value")
unknown("Missing value") == 5 = unknown("Cannot compare unknown value")
unknown("Missing value") == unknown("Missing value") = unknown("Cannot compare unknown values")
```

#### List Operations
```mbl
# List operations with Unknown
my_list = [1, 2, unknown("Missing value"), 4]
my_list[2] = unknown("Cannot access unknown index")
my_list.length() = 4  # Unknown values are counted in length
```

#### Record Operations
```mbl
# Record operations with Unknown
person = {
    name: "John",
    age: unknown("Age not provided")
}
person.age = unknown("Cannot access unknown field")
person["age"] = unknown("Cannot access unknown field")
```

#### Function Calls
```mbl
# Function calls with Unknown
function greet(name):
    return "Hello, " + name

greeting = greet(unknown("Missing name"))  # Returns unknown("Cannot concatenate with unknown value")
```

#### Type Checking
```mbl
# Type checking with Unknown
type(unknown("Missing value")) = "unknown"
is_unknown(unknown("Missing value")) = true
```

